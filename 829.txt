829
FilterProductTable
index.js

## how to handle searchbar
child class <SearchBar
1. create input, pass handler name only in onChange
<form>
    <input
        type="text"
        placeholder="Search..."
        value={this.props.filterText}
        onChange={this.handleFilterTextChange}
    />
2. create handler in same child with calling parent method passed in props:
  handleFilterTextChange(e) {
      this.props.onFilterTextChange(e.target.value); //param pass to handler in parent class
    }
3. in parent class: pass in handler in props
   <SearchBar
            filterText={this.state.filterText}
            inStockOnly={this.state.inStockOnly}
            onFilterTextChange={this.handleFilterTextChange} // pass in as props
            onInStockChange={this.handleInStockChange}
          />
4. handler in parent class
    handleFilterTextChange(filterText) { //filterText passed in from e.target.value
      this.setState({
        filterText: filterText
      });
    }
	
<FilterableProductTable products={PRODUCTS} 
const PRODUCTS = [
	{category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},
    {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'}
]

# class FilterableProductTable:
state: filterText, inStockOnly

<ProductTable 
	products = { this.props.products}
	filterText ={ this.state.filterText}
	inStockOnly={this.state.inStockOnly}
/>
<SearchBar 
	filterText = {this.state.filteText}
	inStockOnly = {this.state.inStockOnly}
	onFilterTextChange = {this.hanleFilterExtChange}
	onInStockChange={this.handleInStockChange}
/>
// 
 handleFilterTextChange(filterText) {
      this.setState({
        filterText: filterText
      });
}
 handleInStockChange(inStockOnly) {
      this.setState({
        inStockOnly: inStockOnly
      })
 }
 
## class SearchBar
<input type="text" placehodler="Search..."
	value={this.props.filterText}
	onChange={this.hanldFilterTextChange}
handleFilterTextChange(e) {
	this.props.onFilterTextChange(e.target.value);
}
in onChange method, pass in e.target.value, invoke method passed in from parent.
onChange -> handleFilterTextChange-> props.onFilterTextChange()-> (in parent class) onFilterTextChange ->handleFilterTextChange()

## handler instock checkbox, 
<input type="checkbox" checked={this.props.inStockOnly}
	onChange={this.handleInStockChange}
/>
handleInStockChange9e) {
	this.props.onInStockChange(e.target.checked);
}

##in parent method 
define:
onInStockChange={this.handlInStockChange}
call method:
handleInStockChange(inStockOnly) {
      this.setState({
        inStockOnly: inStockOnly
      })
    }

## filter rows with searchText and display in Table
const rows =[];

this.props.products.forEach( (product) => {
	if(product.name.indexOf(filterText)) === -1{
		return;
	}
	if(inStockOnly && !product.stocked) {
		return;
	}
	rows.push( <ProdutRow product={product} key={product.name} />);
});
## dispaly in table:
<tbody> {rows}</tbody>
	
	
### temperture calculate
# parent class
state: {temperature: '', scal:'c' };
   <TemperatureInput
          scale="c"
          temperature={celsius}
          onTemperatureChange={this.handleCelsiusChange} />
   <TemperatureInput
          scale="f"
          temperature={fahrenheit}
          onTemperatureChange={this.handleFahrenheitChange} />

## child TemplatureInput:
const temperature=this.props.teperature;
<input value={temperature}
			onchange={this.handleChange} />
handler method: invoke paranet method passed in from props
handleChange(e) {
	this.props.onTemperatureChange(e.target.value);
}
#3 in parent:
onTemperatureChange={this.handleCelsiusChange} />
method handleCelsiuschange(temp) { // temp passed in from child. event.target.value
	this.setState({scale:'c', temp});
}

### pass in from event: 1:
<TextField
              name='title'
              label='Exercise'
              value={this.state.title}
              onChange={this.handleChange('title')}
              margin='normal'
 />	
     handleChange = name => event => {
      console.log(this);
      this.setState({
        [name]: event.target.value,
      });
    };
	
## pass in from event 2: pass in just function name only
<TextField
              name='title'
              label='Exercise'
              value={this.state.title}
              onChange={this.handleChange} // pass in func name only
              margin='normal'
 />		
 handleChange = ({ target: { name, value } }) =>{
        console.log(name);
        console.log(value);
  
        this.setState({
          [name]: value
        })
    }	
	
## pass infrom event method 3: return a function handler
 onChange={(e)=>this.handleChange(e)} or just the funct name
 onChange={this.handleChange}
 
 handleChange = (e) =>{
    console.log(this);
      this.setState({
        [e.target.name]: e.target.value
      })
    }
	
##handle form pass in value	id:
 onClick={() => this.handleDelete(id)}
   handleDelete = id =>
      this.setState(({ exercises }) => ({
        exercises: exercises.filter(ex => ex.id !== id)
      }))
## use both event and id pass in: pass in default event,
onClick={this.handleDelete(id)}

handleDelete = id => e=>{    
      console.log(e.target.value);
      this.setState(({ exercises }) => ({
        exercises: exercises.filter(ex => ex.id !== id)
      }))
    }
	
## best way:
create sub component, pass handler and use props as argument,
which will re-render only when props change.
class TableHeader extends Component {
	handlerClick = () => {
		this.props.onHeaderClick(this.props.value); // onHeaderClick defined in parent
	}
	render() {
		return {
			<th onClick={this.handleClick}>
				{this.props.column}
			</th>
		);
	}
}
##Main Component:
{this.props.defaultColumns.map((column) => (
  <TableHeader
    value={column} // property pass to child
    onHeaderClick={this.handleSort}
  />
))}