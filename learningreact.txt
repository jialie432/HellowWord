fetch("https://api.randomuser.me/?nat=US&results=4")
  .then(response => response.json())
  .then(members => {
	let datalist= members.results;
	datalist.map(data=>console.log(data.phone))
	//console.log(members.results)  
	})
  .catch(err => console.error(err))
 
fetch(url)
    .then((resp) => resp.json()) // Transform the data into json 
	.then(function(data) {
    let authors = data.results; // Get the results
    return authors.map(function(author) { // Map through the results and for each run the code below
      let li = createNode('li'), //  Create the elements we need
          img = createNode('img'),
          span = createNode('span');
      img.src = author.picture.medium;  // Add the source of the image to be the src of the img element
      span.innerHTML = `${author.name.first} ${author.name.last}`; // Make the HTML of our span to be the first and last name of our author
      append(li, img); // Append all our elements
      append(li, span);
      append(ul, li);
    })
  })
  
 use spread ... to copy object properties:
 let color_lawn = {
    title: "lawn",
    color: "#00FF00",
    rating: 0
}
const rateColor = (color, rating) => 
    ({
        ...color,
        rating
    })
##array concat does not mutate original array
const addColor = (title, array) => array.concat({title})
#use spread add new element to object
let list = [
    { title: "Rad Red"},
    { title: "Lawn"},
    { title: "Party Pink"}
]

const addColor = (title, list) => [...list, {title}]

Pure Function, takes an argument, returns an object, 
//    and causes zero side effects
const selfEducate = person => 
    ({ 
        ...person, 
        canRead: true, 
        canWrite: true 
    })
const schools = [
  "Yorktown",
  "Washington & Lee",
  "Wakefield"
]

const wSchools = schools.filter(school => school[0] === "W")
const cutSchool = (cut, list) => 
    list.filter(school => school !== cut)
const highSchools = schools.map(school => `${school} High School`)

# create object use map
const highSchools = schools.map(school => ({ name: school }))

const editName = (oldName, name, arr) =>
    arr.map(item => {
        if (item.name === oldName) {
            return {
                ...item,
                name
            }
        } else {
            return item
        }
    })

let updatedSchools = editName("Stratford", "HB Woodlawn", schools)

const schools = {
  "Yorktown": 10,
  "Washington & Lee": 2,
  "Wakefield": 5
}
const schoolArray = Object.keys(schools).map(key=>
	({
		nam:key,
		wins:schools[key]
	})
)

const ages = [21,18,42,40,64,63,34];
const max = ages.reduce(
    (max, value) => (value > max) ? value : max, 
    0
)

#default props
  static defaultProps = {
        ingredients: 0,
        steps: 0,
        title: "[untitled recipe]"
    }

customize props error message:
	title: (props, propName )=>
		(typeof props[propName] != 'string' )?
			new Error("title must be string") :
			(props[propName].length >20?
				new Error(" title is over 20 char"):null
			)

# user ref 
<form onSubmit={this.submit}>
              <input ref="_title"
                     type="text"
                     placeholder="color title..." required/>
              <input ref="_color"
                     type="color" required/>
	submit(e) {
		const {_title,_color}=this.refs
		alert( `${_title.value} ${_color.value}`) // use backtrike

## use ftech
this.state= {
	data:[],
	loaded:false,
	laoding:false
}

1. in componentdidmount
componentDidMount(){
	this.setState({loading:true});
	fetch(url)
	.then(response=>response.json())
	.the(obj=>obj.results)
	.then(data=>this.setState( {
		loaded:true,
		loading:false,
		data
	}))
}
3.render() {
	const {data,loading,loaded } = this.state
	return (loading)?
		<div>Loading...</div> :
		{data.map((person,i) => {
			const {first,last } = person.name
			return <li key={i}>{first } {last} </li>
		})}
	