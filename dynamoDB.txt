##save data to DynamoDB
	static AmazonDynamoDB client = AmazonDynamoDBClientBuilder.standard().withEndpointConfiguration(
			new AwsClientBuilder.EndpointConfiguration("http://localhost:8000", "us-east-1"))
			.build(); 
	static DynamoDB dynamoDB = new DynamoDB(client);
	Table table = dynamoDB.getTable(tableName);
	Item item = new Item()
                .withPrimaryKey("Id", 101)
                .withString("Title", "Book 101 Title")
                .withString("ISBN", "111-1111111111")
                .withStringSet("Authors",
                    new HashSet<String>(Arrays.asList("Author1")))
                .withNumber("Price", 2)
                .withString("Dimensions", "8.5 x 11.0 x 0.5")
                .withNumber("PageCount", 500)
                .withBoolean("InPublication", true)
                .withString("ProductCategory", "Book");
    table.putItem(item);
// 7 days ago
            long time1 = (new Date()).getTime() - (7 * 24 * 60 * 60 * 1000); 
			
##Read data from DynamoDB
Table table = dynamoDB.getTable(tableName);
Item item = table.getItem("Id", // attribute name
            id, // attribute value
            "Id, ISBN, Title, Authors", // projection expression
            null); // name map - don't need this
System.out.println(item.toJSONPretty());

#run query: 2 weeks ago:
       long twoWeeksAgoMilli = (new Date()).getTime()
            - (15L * 24L * 60L * 60L * 1000L);
        Date twoWeeksAgo = new Date();
        twoWeeksAgo.setTime(twoWeeksAgoMilli);
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        String twoWeeksAgoStr = df.format(twoWeeksAgo);

       QuerySpec querySpec = new QuerySpec()
            .withKeyConditionExpression("Id = :v1 and ReplyDateTime > :v2")
            .withValueMap(new ValueMap()
                .withString(":v1", replyId)
                .withString(":v2", twoWeeksAgoStr))
            .withProjectionExpression("Message, ReplyDateTime, PostedBy");		
       ItemCollection<QueryOutcome> items = table.query(querySpec);
        Iterator<Item> iterator = items.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next().toJSONPretty());
        }			