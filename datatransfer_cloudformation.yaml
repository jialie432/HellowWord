---
  AWSTemplateFormatVersion: 2010-09-09
  Description: AWS Step Functions sample project for reading messages from a DynamoDB table and sending them to SQS
  Resources:
    DynamoDBToSQSStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        RoleArn: !GetAtt [ DynamoDBToSQSExecutionRole, Arn ]
        DefinitionString:
          !Sub
            - |-
              {
                "Comment" : "An example of the Amazon States Language for reading messages from a DynamoDB table and sending them to SQS",
                "StartAt": "Seed the DynamoDB Table",
                "TimeoutSeconds": 3600,
                "States": {
                  "Seed the DynamoDB Table": {
                    "Type": "Task",
                    "Resource": "${seedingFunctionArn}",
                    "ResultPath": "$.List",
                    "Next": "For Loop Condition"
                  },
                  "For Loop Condition": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "Not": {
                          "Variable": "$.List[0]",
                          "StringEquals": "DONE"
                        },
                        "Next": "Read Next Message from DynamoDB"
                      }
                    ],
                    "Default": "Succeed"
                  },
                  "Read Next Message from DynamoDB": {
                    "Type": "Task",
                    "Resource": "arn:${AWS::Partition}:states:::dynamodb:getItem",
                    "Parameters": {
                      "TableName": "${ddbTableName}",
                      "Key": {
                        "MessageId": {"S.$": "$.List[0]"}
                      }
                    },
                    "ResultPath": "$.DynamoDB",
                    "Next": "Send Message to SQS"
                  },
                  "Send Message to SQS": {
                    "Type": "Task",
                    "Resource": "arn:${AWS::Partition}:states:::sqs:sendMessage",
                    "Parameters": {
                      "MessageBody.$": "$.DynamoDB.Item.Message.S",
                      "QueueUrl": "${sqsQueueUrl}"
                    },
                    "ResultPath": "$.SQS",
                    "Next": "Pop Element from List"
                  },
                  "Pop Element from List": {
                    "Type": "Pass",
                    "Parameters": {
                      "List.$": "$.List[1:]"
                    },
                    "Next": "For Loop Condition"
                  },
                  "Succeed": {
                    "Type": "Succeed"
                  }
                }
              }
            - {ddbTableName: !Ref DDBTable, sqsQueueUrl: !Ref SQSQueue, seedingFunctionArn: !GetAtt [ SeedingFunction, Arn ] }
    DynamoDBToSQSExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: DynamoDBAndSQSAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:GetItem"
                  Resource:
                    - !GetAtt DDBTable.Arn
                - Effect: Allow
                  Action:
                    - "sqs:SendMessage"
                  Resource:
                    - !GetAtt SQSQueue.Arn
                - Effect: Allow
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - !GetAtt [ SeedingFunction, Arn ]
    DDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        ProvisionedThroughput:
          ReadCapacityUnits: "10"
          WriteCapacityUnits: "10"
        AttributeDefinitions:
          -
            AttributeName: "MessageId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "MessageId"
            KeyType: "HASH"
    SQSQueue:
          Type: AWS::SQS::Queue

    SeedingFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        Handler: "index.lambda_handler"
        Role: !GetAtt [ SeedingFunctionExecutionRole, Arn ]
        Code:
          ZipFile:
            !Sub
              - |-
                console.log('Loading function');
                const AWS = require('aws-sdk');

                exports.lambda_handler = (event, context, callback) => {
                    var docClient = new AWS.DynamoDB.DocumentClient();
                    var messageIds = []

                    for (var i = 0; i < 10; i++) {
                      console.log("Adding a new item...");
                      var messageId = "MessageNo" + i.toString();
                      messageIds.push(messageId);

                      var message = "Hi! This is message no " + i.toString();
                      var params = {
                          TableName: "${ddbTableName}",
                          Item:{
                              "MessageId": messageId,
                              "Message": message
                          }
                      };
                      docClient.put(params, function(err, data) {
                          if (err) {
                              console.error("Unable to add item. Error JSON:", JSON.stringify(err, null, 2));
                          } else {
                              console.log("Added item:", JSON.stringify(data, null, 2));
                          }
                      });
                    };
                    messageIds.push("DONE");
                    callback(null, messageIds);
                };
              - {ddbTableName: !Ref DDBTable}

        Runtime: "nodejs6.10"
        Timeout: "60"
    SeedingFunctionExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: SeedingFunctionExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:PutItem"
                  Resource: !GetAtt DDBTable.Arn

  Outputs:
    StateMachineArn:
      Value: !Ref DynamoDBToSQSStateMachine
    ExecutionInput:
      Description: Sample input to StartExecution.
      Value:
        >
          {}